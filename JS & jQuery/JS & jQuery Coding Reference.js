// JS & jQuery Coding Reference

/*
"Every piece of information must have a single, unambiguous, authoritative representation within a system."
	-Andrew Hunt, The Pragmatic Programmer, 1999
*/

/*
	VISIT: "caniuse.com" for compatibility information regarding different web browsers for
	JS versions (ES5, ES6, etc.), keywords (let, const, etc.), and concepts (modules).

	Three reasons for the ES5 to ES6 updates are listed below:

	1. 
		Readability and economy of code:
		The new syntax is often easier to understand (more readable) and requires fewer characters to create the same functionality (economy of code).
	2. 
		Addresses sources of ES5 bugs:
		Some ES5 syntax led to common bugs. With ES6, Ecma introduced syntax that mitigates some of the most common pitfalls.
	3. 
		A similarity to other programming languages:
		JavaScript ES6 is syntactically more similar to other object-oriented programming languages.
		This leads to less friction when experienced, non-JavaScript developers want to learn JavaScript.
	
	Because ES6 addressed the above issues, Ecma knew that adoption by web developers would occur quickly, while web browser support lagged behind.

	To limit the impact of ES6 browser compatibility issues, Ecma made the new syntax backwards compatible, which means you can map JavaScript ES6 code to ES5.
	Although the majority ES6 is supported for web browsers now, you can still use a Node package called "babel" that supports conversion between ES6 and ES5.

	Ensure that your "package.json" file has a "build" script:
		`npm init` // initializes Node Package Manager requirements by creating an appropriate "package.json"
	```
	"scripts": {
    "build": "babel src -d lib" // <babel_cmd> <source> <dest> ; the "-d" flag to designate that all of the source files will be written to one directory
  }
	```

	You should also have a local ".babelrc" file that looks like:
	```
	{
  	"presets": ["env"]
	}
	```
	so that "babel" understands what version of JS you want to convert from (most commonly ES6 and ES6+).

	Then, by running:
	```
	npm install babel-cli -D // the "-D" flag adds the package to the list of "devDependencies" in the local "package.json" file automatically
	npm install babel-present-env -D
	npm build
	```
	all of the source files contained in the "src" directory will be duplicated, converted to ES5 syntax, and stored in the "lib" directory.
*/

/*
	AJAX = Asyncronous JavaScript and XML
	XML = eXtensible Markup Language
	XHR = XML HTTP Request
	JSON = JavaScript Object Notation
	XSS = Cross-Site Scripting
*/

/*
XSS Attacks
	1. Do not allow untrusted users to submit HTML markup or JS.
	2. Double-check validation on the server before displaying user content or storing it on the database ; users could bypass validation by turing off JS.
	3. The database may contain safe markup and script from trusted sources ; doesnt process the code, just simply stores it.
	4. As your data leaves the database, all potentially dangerous characters should be escaped.
	5. Only insert content generated by users into certain parts of the template files.
	6. Don't create DOM fragments containing HTML from untrusted sources. It sould only be added as text once it has been escaped.
*/

/*
XSS Escaping and Controlling Markup
	1. NEVER include data from untrusted/external sources in JS. This involves escaping all ASCII chars less than 256 (that arent alphanumeric). Ex:
		& -> &amp;
		< -> &lt;
		> -> &gt;
		` -> &#x60;
		' -> &#x27; (not &apos;)
		" -> &quot;
		/ -> &#x2F;
	2. For JS:
		DO use "textContent" or "innerText"
		DO NOT use "innerHTML"
	3. For jQuery:
		DO use .text()
		DO NOT use .html()
*/

// JS listener ID's must be unique to take action

/*
Use JS to RAMP the user web experience
	React to events triggered by the user or browser
	Access the content on the page
	Modify the content on the page
	Program rules or instructions for the browser to follow
*/

/*
HTML is the base layer, the content layer ; give basic information
	CSS is the middle layer, the presentation layer ; gives styling to the information
		JS is the top layer, the behavior layer ; enhances the interactive experience of the page
*/

/*
6 Rules/Guidelines for Naming Variables in JS
	1. Must begin with a letter, dollar signs ($), or underscores (_); must not begin with a number
	2. Must not contain dashes (-) or periods (.)
	3. Must not be the same as a keyword reserved for JS ; can have a keyword as part of the variable name
	4. Variable names are case sensitive
	5. Use names that are descriptive of their value
	6. Use camel casing or underscores (_) to seperate each word within the variable name
*/

/*
Document Object Model (DOM)
	The topmost object in the DOM is the 'document' object
	The next object is the html source
	The next object is the source body element
	NodeLists that are returned via queries are similar to arrays (0 indexed) but are called collections
		Live NodeList: When your script updates the page, the NodeList is updated at the same time, reflecting the changes
		Static NodeList The NodeList is not updated to reflect the changes made by the script
*/

// Minification = removes all unecessary whitespace from a file and is denoted as: file.min.js

// jQuery doesnt achieve anything that cant be done with vanilla JS, just makes coding simpler; "Write less, do more."

/*
Local, session, and cookies data cannot be cross referenced/accessed unless all parts of the URL match
	1. http:// 		; Protocol
	2. www.				; Sub-domain
	3. google.com ; Domain
	4. :3000			; Port
*/


/*
When attempting to access elements outside of the bounds of an array, JS does not return a segmentation fault, it simply returns "undefined".
*/


// For some more detailed documentation, specifications, and browser compatability, visit:
"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar"

/*--------------------------------------------------------------------------------------------------------------*/
// KEYWORDS & STRUCTURES
	// variables that are defined without given a value will automatically be initialized to "undefined"

var <variable> = <value>; // defines a variable globally or locally to an entire function regardless of block scope ; can change value
let <variable> = <value>; // defines a variable locally ; can change value ; ES6
const <variable> = <value>; // defines a variable locally ; CANNOT change value ; MUST be assigned a value when declared ; ES6
document; // supported by many major modern web browsers ; creates new object for each element on the page for manipulation
window;
Object; // under the hood, arrays and functions are considered objects
String;
Boolean;
Number;
Date;
Math;
Regex();
enum();
function{}; // normal functions in JS do not need to be prototyped ; function expressions need to be declared before they are called
this; // evaluates to the value of the ThisBinding of the current execution context ; access the current element being evaluated
$(this); // creates a jQuery selection; allows jQuery methods to be used on the current element being evaluated
null; // nothing
NaN; // number is too big ; number overflow ; Not a Number
undefined // default when "var" or "let" variable declarations are not initialized
true // boolean true
false // boolean false
throw
try
catch()
finally
debugger // enables debugging interrupt at location for use in the web inspect console
import()
new()
void()
while()
for()
do
with()
typeof() // returns the type of the input variable
switch()
	{case 'One': <expression>; break;
	 case 'Two': <expression>; break;
	 default: 	 <expression>; break;}
delete;
return; // could return a single value as normal or an array of values
break; // break out of a loop
continue; // jump to the next iteration of a loop


/*--------------------------------------------------------------------------------------------------------------*/
// HTML ELEMENT ATTRIBUTES
<elem
	autofocus= // gives focus to this element when the page is loaded
	placeholder= // greyed out hint in a text field about input formatting and such
	required= // checks that the field has a value ; takes a boolean?
	min= // minimum permitted number
	max= // maximum permitted number
	step= // interval by which the numbers should increase or decrease
	value= // default value for a number when the page loads
	autocomplete= // shows a list of past entries ; true by default ; exception for sensitive data
	pattern= // allows a regex specification for validation
	novalidate= // used on the form element to disable the built-in form validation
>


/*--------------------------------------------------------------------------------------------------------------*/
// METHODS

alert("string")
console.log(value) // <value> can be a string, concatenated strings, a number, or an equation with numerical operators
console.group("string")
console.table(object_variable) // take JSON formatted data

parent.appendChild(newItem) // put new item at end of a list
parent.insertBefore(newItem, target) // put new item before target

selection.html("<%= j action %>") // retrieves only the HTML inside the first element in the matched set along with any of its descendents from the jQuery selection
selection.text() // will return the text from the a jQuery selection
// the 'j' will escape JS and run any embedded ruby code

elem.before() // insert content before the selected element
elem.after() // insert content after the selected element

a.prepend(b) // insert content inside the selected element(s) after the opening tag ; adds b to a
a.prependTo(b) // adds a to b
a.append(b) // insert content inside the selected element(s) before the closing tag ; adds b to a
a.appendTo(b) // adds a to b

elem.attr("attrOne", "attrTwo") // will get (one) and optionally set or update (two) a specified attrubute and its value
elem.removeAttr("attr") // obvious
elem.addClass("klass") // obvious
elem.removeClass("klass") // obvious

elem.css("property", "value") // can get and/or set css property:value pairs on elements
elem.css("property1": "val1", "property2": "val2") // manipulate multiple css property:value pairs

selection.each() // applies the same code to each element in the selection

elem.show() // displays elem
elem.hide() // hides elem
elem.toggle() // toggles between showing and hiding elem
elem.fadeIn() // obvious
elem.fadeOut() // obvious
elem.fadeTo() // changes the opacity of elem
elem.fadeToggle() // hides or shows elem by changing the opacity (the opposite of thier current state)
elem.slideUp() // obvious
elem.slideDown() // obvious
elem.slideToggle() // obvious
elem.delay() // delays execution of subsequent items in queue
elem.stop() // stops animation if it is currently running
elem.animate({[, speed][, easing][, complete]}) // creates custom animations
// "speed" indicated the duration of the animation in milliseconds ; can also take keywords like 'fast' or 'slow'
// "easing" can take 2 values: 'linear' will make the transition uniform & 'swing' has a slow start, fast middle, and slow end
// "complete" is used to call a function that should run when the animation has finished ; callback function

selection.find() // all elements within current selection that match the selector
selection.closest() // nearest ancestor (not just parent) that matches the selector
selection.parent() // direct parent
selection.parents() // all parents
selection.children() // all children
selection.siblings() // all siblings
selection.next() // the next sibling
selection.nextAll() // all subsequent siblings
selection.prev() // the previous sibling
selection.prevAll() // all previous siblings

selection.add() // adds elements to a set of matched elements
selection.filter() // reduces number of matched elements to those specified by function
selection.is() // 
selection.each() // applies same function to each element in a matched set
selection.toArray() // converts a jQuery collection to and aray of DOM elements ; enables use of array methods
selection:contains() // 
selection.not() / :not() // removes elements from a set of matched elements
selection.has() / :has() // 
// based on the dot or colon selector method syntax, the following two selectors are equivalent:
$("li").not("hot").addClass("cool");
$("li:not(.hot)").addClass("cool");
// colon selector method syntax is faster than dot, but dot is cleaner and easier to read/understand

$("li").eq(index) // element that matches the index number
$("li:lt(index)") // elements with an index less than specified
$("li:gt(index)") // elements with an index greater than specified
// index is 0 based like array indexes

elem.remove() // removes any matched elements from the DOM tree including any descendants
elem.detach() // same as "remove" but keeps a copy of removed elements in memory
elem.empty() // removes child nodes and descendants from any elements in the matching set
elem.unwrap() // removes parents of matched set, leaving matched elements
elem.clone() // creates full copy of matched set including descendants

array.push() // add item(s) to tail of array and returns the length
array.unshift() // adds item(s) to head of array and returns length
array.pop() // removes item from tail of array and returns the item
array.shift() // removes item from head of array and returns item
array.forEach() // executes a function once for each item in array
array.some() // checks if some/any items in array pass test specified by function
array.every() // checks if all items in array pass test specified by function
array.concat() // creates new array containing its and other array values
array.filter() // creates new array with item(s) that pass test specified by function ; new array is not necessarily same length as original
array.sort() // reorders item(s) in array using a function ; by default the sorting is lexicographically for numbers and strings
array.reverse() // reverses the order of the item(s) in array
array.map() // call a function on each element in array and creates a new (same length) array with results
array.findIndex() // returns the index value of the first element that evaluates true to the callback function ; returns -1 otherwise
array.reduce((total, curr_val, curr_index, arr) => {}, init_val);
	/*
	<total> is <init_val> or the previously returned value of the function ; REQUIRED
	<curr_val> is the value of the current element ; REQUIRED
	<curr_index> is the index of the current element ; OPTIONAL
	<arr> is the array object that the current element belongs to ; OPTIONAL
	<init_val> initializes <total> to some value other than 0 ; OPTIONAL
	*/
array.every() // returns true if every element in <array> passes the callback function test

string.replace(/^the /i, "") // takes a regex as first argument and what to replace with as the second ; replace "the " with ""

form.action() // the URL that the form is submitted to
form.method() // if to be sent via GET or POST
form.name() // rarely used, more often used is "id"
form.elements() // a collection of the elements that the form can interact with ; they can be accessed via index or thier name attribute
form.submit() // submits the form
form.reset() // resets the form to the initial values it had when the page first loaded
form.value // text if text input, value attribute otherwise
form.type // type of form element (text, password, radio, checkbox, etc)
form.name // gets or sets the name attribute of the form
form.defaultValue // the initial value when the page is loaded
form.form // the form that the control belongs to
form.disabled // disables the form element
form.checked // indicates which checkboxes or radio buttons have been checked ; returns boolean
form.defaultChecked // whether or not checkboxes or radio buttons were checked when the page loaded ; returns boolean
form.selected // indicates that and item from a select box has been selected ; returns boolean

selectBox.options // a collection of all the option elements
selectBox.selectedIndex // index number of the option that is currently thier "option"
selectBox.length // number of options
selectBox.multiple // allows to select multiple options
selectBox.selectedOptions // a collection of all the selected options
selectBox.add(option, before) // add "option" prior to index "before" ; will default to tail if no "before" is given
selectBox.remove(index) // removes option at "index"

element.isRequired() // checks whether the element has a required value
element.isEmpty() // checks whether the element has a value


/*--------------------------------------------------------------------------------------------------------------*/
// THE MATH AND NUMBER OBJECTS

Math.random() // returns a random value between 0 ~ 1
Math.random() * n // returns a random value between 0 ~ (n - 1)
Math.floor(n) // rounds a numerical down to the nearest Integer
Math.ceil(n) // rounds a numerical value up to the nearest Integer


Number.isInteger(n) // true if 'n' is an Integer and false otherwise


/*--------------------------------------------------------------------------------------------------------------*/
// EVENTS
$("element").on("event")

// When an event "fires" on an element it "triggers" a script that takes an action.
// HTML Event Handlers ; DO NOT USE
// DOM Event Handlers ; OLDER BUT USEFUL
element.onblur() = checkUsername;
// DOM Event Listeners ; CURRENT AND PREFERRED
element.addEventListener("blur", checkUsername, false)
												(event, function_code, flow)
												// flow is false by default and uses element bubbling
												// if flow is true it uses element capturing instead ; not supported ≤ IE8

// UI
load
unload
error
resize
scroll

// Keyboard
keydown
keyup
keypress

// Mouse
click // also fires when the ENTER key is pressed and an element has focus
dblclick
mousedown
mouseup
mousemove
mouseover
mouseout
// screen > page > client is the relationship of display for any webpage and location of mouse pointer can be addressed by:
// screenX & screenY
// pageX & pageY
// clientX & clientY

// Focus
focus / focusin
blur / focusout

// Form
input
change
submit
reset
cut
copy
paste
select

// Mutation
DOMSubtreeModified
DOMNodeInserted
DOMNodeRemoved
DOMNodeInsertedIntoDocument
DOMNodeRemovedFromDocument

// Properties
target // target of the event (most specific element interacted with)
type // type of event that was fired
cancelable // whether or not you can cancel the default behavior of an event

// Methods
preventDefault() // canel the default behavior of an event (if cancelable)
stopPropagation() // stops the event from bubbling or capturing any further

$("li").on("click" events[, selector][, data], function(e) { // the event object
	eventType = e.type; // type of event (click, mouseover, etc.)
	eventData = e.data; // object literal containing extra information passed to the function when the event fires
	eventTarget = e.target; // DOM element that initiated the event
	eventX = e.pageX; // mouse position from left edge of viewport
	eventY = e.pageY; // mouse position from top edge of viewport
	eventTimeStamp = e.timeStamp; // number of milliseconds from Jan 1st, 1970, to when the event was fired (Unix Time)
	eventActioner = e.which; // which button or key that was pressed to fire the event
	e.preventDefault(); // see function definition in this file
	e.stopPropagation(); // see function definition in this file
});
// "selector" lets you respond to a subset of the elements in the initial jQuery selection that will filter its descendants
// "data" lets you pass extra info to the function that is called when the event is fired ; the info is passed along with 'e'


/*--------------------------------------------------------------------------------------------------------------*/
// STRINGS
title = "Mollys Special Offers"; // can use a single single quote inside double quotes
message = '<a href=\"sale.html\">25% OFF!</a>'; // use \ to escape characters inside of a single or double quoted string

"string".length() // returns the total number of characters in the string ; returns 6
"s t r ".trim() // removes the whitespace from a string ; returns "str"
"string".toUpperCase() // converts all characters in the string to upper case ; returns STRING
"string".startsWith("s") // true if string starts with the given character and false otherwise ; returns true

"str" + "ing" = "string"; // can concatenate strings together with the '+' operator

var s = "string"; // s[2] returns 'r'

"Single quotes (') can be used explicitly inside of double quoted strings, they don't have to be escaped (\')."

/*--------------------------------------------------------------------------------------------------------------*/
// ARRAYS
	// apparently you can change elements in an array even if it is declared with a "const"????????

var <arrayName> = ['hello', true, 69]; // array literal
var <arrayName> = new Array('hello', true, 69); // array dynamic constructor
// two ways to declare an array
// elements inside arrays in JS do not all need to be of the same datatype
<arrayName>[<index>] // classic array access
<arrayName>.item(<index>) // can access the items inside an array with the item() function/method
<arr>.push(<elem>) // append <elem> to the end of <arr>
<arr>.pop() // remove last element from <arr>
<arr>.join() // join all elements of <arr> into a single string, including the commas.......
<arr>.slice(<start_i>, <end_i>) // copy <arr> elements from <start_i> to less than <end_i> ; <end_i> is optional
<arr>.splice(<p>, <n>) // remove <n> items from the array, starting from position <p> ; removes elements toward the and of the array
<arr>.shift() // remove element from the front of the array
<arr>.unshift(<elem>) // add <elem> to the front of <arr>
<arr>.concat(<elements> || <arr2>) // elements or another array to <arr> ; can also assign to an independent variable
<arr>.length() // returns the 1-based length of <arr>
<arr>.forEach(function(item, index, array){/* do something for each element in the array */}); // <item>, <index>, & <arr> are usable parameters inside the function
<arr>.indexOf(<elem>) // returns the 0-based index of <elem> if found, returns ???? otherwise



/*--------------------------------------------------------------------------------------------------------------*/
// OPERATORS

1+2 // 3
3-4 // -1
5/6 // .83333333333
7*8 // 56
9%10 // 9
a+=2 // a = a + 2
b-=4 // b = b - 4
c*=6 // c = c * 6
d/=10 // d = d / 10
i++ // increment by 1
j-- // decrement by 1
<var1> = <var2> // assignment
<var1> == <var2> // loose or abstract equality comparison ; similarity ; type conversion
<var1> === <var2> // strict equality comparison ; identity ; no type conversion
<var1> != <var2> // loose or abstract inequality comparison ; type conversion
<var1> !== <var2> // strict inequality comparison ; no type conversion
<var1> > <var2>
<var1> >= <var2>
<var1> < <var2>
<var1> <= <var2>
a&&b // logical AND
c||d // logical OR
	let <var> = <first_val> || <second_val> // if <first_val> is defined, <var> takes its value but takes <second_val> otherwise ; short circuit statement
!<expression>
conditional ? "do it true" : "do if false"; // ternary ; replaces if..else statement/structure(s)


/*--------------------------------------------------------------------------------------------------------------*/
// TEMPLATE LITERALS

// Template literals were introduced in ES6

console.log(`This is a sentence that will be printed literally with a ${placeholder}.`);
console.log(`Single and double quote characters (' & ") will also be printed literally without escacping (\' & \").`);


/*--------------------------------------------------------------------------------------------------------------*/
// FUNCTIONS (Inside objects they are called methods)
	// by default, the return value of any JS function is "undefined"
	// In JS functions are "first class objects", which means that they can have properties and methods just like any other object
	// In JS functions can also accept other functions as parameters and/or have a function as a return value, these are "higher order functions"

function func_name(param1 = "default", param2, ...) // defines a function called <func_name> with a list of parameters and one default parameter
{
	// do something
	return something; // explicit return
};

const func_name = function(param1, param2, ...)
{
  // do something
};

const func_name = (param1, param2, ...) =>
{
  // do something
};

const func_name = param => 3.14159265358*param; // single line function with implicit return


const f = func_name; // assigning a variable to a function allows for shorter reference to the function and associated properties
	f.name() // returns the original function name "func_name"


// FOR EXAMPLE THE RUN TIME OF ANY DESIRED FUNCTION COULD BE ANALYZED BY PASSING THE FUNCTION INTO A "HIGHER ORDER FUNCTION"
const timeFuncRuntime = fParam => {
  let t1 = Date.now();
  fParam();
  let t2 = Date.now();
  return t2 - t1;
};
const func_name_time = timeFuncRuntime(func_name);


func_name(arg1, arg2, ...); // calls func_name



// JS has what is called "Lexical Scope" (or Static Scope)
	// nested functions have access to variables contained within thier parents
	// but parents do not have access to variables contained within thier children

// Immediately Invoked Function Expressions (IIFE) ("iffy")
var area = (function() // 
{
	var width = 3;
	var height = 2;
	return width * height;
}());
// the internal parenthesis tell the interpreter to call the function immediately
// the external parenthesis tell the interpreter to treat as an expression
// the variable area will hold the value of the return statement rather than the function itself


$("li").each(function() {
	var ids = this.id;
	$(this).append("<em class='order'>" + ids + '</em>');
});


var prices = [1, 2, 125, 2.5, 19, 14, 13.6]
prices.sort(function(a, b){
	return a - b; // sort in ascending order
	return b - a; // sort in descending order
})


/*--------------------------------------------------------------------------------------------------------------*/
// OBJECTS

// JS Objects are similar to Python dictionaries
// The value of an element in a JS Object can also be a function, another Object, or any of the default JS datatypes
// Keys are strings, but dont require the use of surrounding quotation marks if there are no special characters
// Attempting to access data that does not exist within an object will return "undefined"
// Objects are mutable, which means thier keys and values can be updated ; "const" Object values can be updated, but the direct value of the object cannot be reassigned
// Objects are passed by reference, refering to the place in memory which they are stored, rather than the data that the variable stores ; can update Object properties, not fully reassign Object

var hotel = { // creating an object using literal notation
	name: 'Quay',
	rooms: 40,
	booked: 25,
	checkAvailability: function() {
		return this.rooms - this.booked;
	}
};

var object = {} // empty curly brackets will create an empty object using literal notation

// create instances of already created objects using the object constructor notation
var parksHotel = new hotel("Park", 69, 42);
parksHotel.rooms; // can access Object data using dot notation ; 69
parksHotel[booked]; // can also access Object data using bracket notation, it is required to use this notation when keys have special characters ; 42
parksHotel.checkAvailability() // will call the function defined within the Object ; 69-42=27
delete parksHotel.checkAvailability; // removing data from an Object is also possible using the "delete" keyword



/*
	It is also possible to loop through the elements in an Object,
	however, the returned <crewMember> variable does not return the internal Object with `${crewMember}`,
	so to access the <name> property, you must delve through all the Object layers
*/
let spaceship = {
  crew: {
	  captain: { 
      name: 'Lily', 
      degree: 'Computer Engineering', 
      cheerTeam() { console.log('You got this!') } 
    },
	  'chief officer': { 
      name: 'Dan', 
      degree: 'Aerospace Engineering', 
      agree() { console.log('I agree, captain!') } 
    },
	  medic: { 
      name: 'Clementine', 
      degree: 'Physics', 
      announce() { console.log(`Jets on!`) }
    },
	  translator: {
      name: 'Shauna', 
      degree: 'Conservation Science', 
      powerFuel() { console.log('The tank is full!') } 
    }
  }
}; 
for (let crewMember in spaceship.crew) {
  console.log(`${crewMember}: ${spaceship.crew[crewMember].name}`)
};



/*
	Arrow functions inherently bind, or tie, an already defined <this> value to the function itself that is NOT the calling object.
	In the following code snippet below, the value of <this> is the global object, or an object that exists in the global scope,
	which doesn’t have a <prop1> property and therefore returns undefined.
*/
const goat = {
  prop1: "value1",
  arrow_func: () => {console.log(this.prop1);}
};



/*
	There are 3 things to notice about the code snippet below:
	
	1.
		property value shorthand
	2.
		property, functions (require () when called/used), getters and setters (do not require () when called/used)
	3.
		factory functions return objects based on the parameters that are passed in and set to thier property values, quick new obj creation
*/
const robot = {
  model: 'B-4MI',
  mobile: true,
  greetMaster() {console.log(`I'm model ${this.model}, how may I be of service?`);},
  get robotCapacity() {return this._robotCapacity;}
}

const massProdRobot = (model, mobile) => {
  return {
    model,
    mobile,
    greetMaster() {console.log(`I'm model ${this.model}, how may I be of service?`);}
  }
}

const chargingStation = {
  _name: 'Electrons-R-Us',
  _robotCapacity: 120,

  set robotCapacity(newCapacity) {
    if (typeof newCapacity === 'number') {
      this._robotCapacity = newCapacity;
    } else {
      console.log(`Change ${newCapacity} to a number.`)
    }
  },
  get robotCapacity() {
    return this._robotCapacity;
  }
}

const shinyNewRobot = massProdRobot('TrayHax', true); // using the factory function to quickly create a new, custom object instance
shinyNewRobot.mobile = false // ERROR: will not work because the <robot> object does not have a setter method
console.log(shinyNewRobot.mobile); // will return "true"

console.log(chargingStation.robotCapacity); // using a "getter" method to get <robotCapacity()> ; will return 120 ; does not require "()"
chargingStation.robotCapacity = 200;
console.log(chargingStation.robotCapacity); // using a "setter" method to set <robotCapacity()> ; will set to 200 ; does not require "()"



/*
	Destructured Assignment allows you to assign a variable to an Object's property.
	The code snippet below shows how the <functionality> property of the <robot> object is able to be accessed directly after "destructured assignment".
	A similar use of "destructured assignment" is commonly used with "require()" statements at the beginning of a JS script for accessability.
		e.g. "const { shell } = require("shelljs")"
*/
const robot = {
  model: '1E78V2',
  functionality: {
    fireLaser() {console.log('Pew Pew');}
  }
};
const { functionality } = robot;
functionality.fireLaser();



// Object Methods
const <obj_keys_var> = Object.keys(<obj_name>); // will return array of all the available properties for <obj_name>
const <obj_entries_var> = Object.entries(<obj_name>); // will return array of all available properties and thier values for <obj_name>
const <obj_new_assign_var> = Object.assign(<target_obj>, <source_obj>) // will merge <source_obj> with <target_obj> without modifying <source_obj>


/*--------------------------------------------------------------------------------------------------------------*/
// CLASSES:

/*
	JavaScript is an object-oriented programming (OOP) language we can use to model real-world items.
	Classes are a tool that developers use to quickly produce similar objects.
	The code snippet below shows how to interact with class constructors and properties.
	By convention, we capitalize and CamelCase class names.
	Class method and getter syntax is the same as it is for objects EXCEPT YOU CANNOT INCLUDE COMMAS BETWEEN METHODS.
*/

class Dog {
  constructor(name) {
    this._name = name;
    this._behavior = 0;
  }

  get name() {return this._name;}
  get behavior() {return this._behavior;}   
  incrementBehavior() {this._behavior++;}
}

const sparky = new Dog('Sparky'); // new instance of Dog class
console.log(sparky.name); // "Sparky"
console.log(sparky.behavior); // 0
sparky.incrementBehavior();
console.log(sparky.behavior); // 1


/*
	Below is another code snippet example of how to use classes with getter methods and properties.
	For practical implementation of creating lots of instances of a single class,
	an array or a .csv file could be used as proper indexing within a loop.
*/


class Surgeon {
  constructor(name, department) {
    this._name = name;
    this._department = department;
    this._remainingVacationDays = 20;
  }
  get name() {return this._name}
  get department() {return this._department}
  get remainingVacationDays() {
    return this._remainingVacationDays
  }
  
  takeVacationDays(daysOff) {
    this._remainingVacationDays -= daysOff;
  }
}

const surgeonCurry = new Surgeon("Curry", "Cardiovascular");
const surgeonDurant = new Surgeon("Durant", "Orthopedics");

console.log(surgeonCurry.name);
surgeonCurry.takeVacationDays(3);
console.log(surgeonCurry.remainingVacationDays);


/*
	When multiple classes share properties or methods, they become candidates for inheritance,
	a tool developers use to decrease the amount of code they need to write.
	With inheritance, you can create a parent class (also known as a superclass) with properties and methods that multiple child classes
	(also known as subclasses) share. The child classes inherit the properties and methods from their parent class.
	The benefits (time saved, readability, efficiency) of inheritance grow as the number and size of your subclasses increase.
	One benefit is that when you need to change a method or property that multiple classes share, you can change the parent class, instead of each subclass.
	You can also create methods that are available to the entire class, rather than available to only an instance of that class.
	Using the keyword "static", you can create a function that does not require the creation of a "new" class instance.
*/

class HospitalEmployee { // the parent class (superclass)
  constructor(name) {
    this._name = name;
    this._remainingVacationDays = 20;
  }
  
  get name() {return this._name;}
  get remainingVacationDays() {return this._remainingVacationDays;}

  takeVacationDays(daysOff) {this._remainingVacationDays -= daysOff;}
  static generatePassword() {return Math.floor(Math.random() * 10000);}
}

class Nurse extends HospitalEmployee {
  constructor(name, certifications) {
    super(name);
    this._certifications = certifications;
  }
  
  get certifications() {return this._certifications;}
  
  addCertification(newCertification) {this._certifications.push(newCertification);}
}

const nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);
console.log(nurseOlynyk.name); // "Olynyk"
console.log(nurseOlynyk.certifications) // ['Trauma', 'Pediatrics']
console.log(nurseOlynyk.remainingVacationDays); // 20
nurseOlynyk.takeVacationDays(5);
console.log(nurseOlynyk.remainingVacationDays); // 15
nurseOlynyk.addCertification("Genetics");
console.log(nurseOlynyk.certifications); // ['Trauma', 'Pediatrics', 'Genetics']


/*--------------------------------------------------------------------------------------------------------------*/
// AJAX, JSON, AND XML

// browsers only let AJAX load HTML and XML if the data is from the same domain
// JSON is unforgiving ; missing any punctuation will break the file
// JSON is JS and can contain malicious content ; dont trust external JSON files

var xhr = new XMLHttpRequest(); // new instance of an 'X'ML'H'ttps'R'equest
xhr.open("GET", "data/test.json", true) // specify the type of request, the data, and the asynchronous status
xhr.send("search=arduino") // sends the instance to the server ; default argument is NULL, but extra info can be sent optionally
xhr.onload() // when the browser has received and loaded a response from the server
xhr.status() // returns the status code of the request (200, 201, 401, 500, 304, etc...)
xhr.load() // loads HTML fragments into an element ; simplest method for retrieving data

$.get(url[, data][, callback][, type]) // loads data using the HTTP GET method, used to request data from the server
$.post(url[, data][, callback][, type]) // loads data using the HTTP POST method, used to send data to the server
$.getJSON(url[, data][, callback]) // loads JSON data using a HTTP GET request
$.getScript(url[, callback]) // loads and executes JS data using a HTTP GET request
// these are methods of a global jQuery object which is why they start with '$' ; they only request data from the server
// they do not automatically use that data to update the elements of a matched set, which is why the '$' is not followed by a selector
// "url" specifies where the data is fetched from
// "data" provides any additional information to send to the server
// "callback" indicated that the function should be called when data is returned (can be named or anonymous)
// "type" shows the return type of data to expect from the server

$.ajax(type: "GET", url: "https:// www.example.com", timeout: 2000, beforeSend: function(){}, success: function(){}, error: function(){}, complete: function(){})
// the methods above use "$.ajax" under the hood ; used to perform all requests
// "timeout" is the number of milliseconds to wait before the event should fail
// "beforeSend" is a function that executes before the AJAX request starts
// "success" is basically the same as the .done() method (mentioned below)
// "error" is basically the same as the .fail() method (mentioned below)
// "complete" runs after "success" or "error" events ; similar to .always()??? (mentioned below)

jqXHR.responseText // the text data
jqXHR.responseXML // the XML data
jqXHR.status // status code
jqXHR.statusText // status description ; typically about an error
jqXHR.done() // code runs if the request was successful
jqXHR.fail() // code runs if the request fails/was unsuccessful
jqXHR.always() // code to run always no matter whether the code was successful or unsuccessful
jqXHR.abort() // halt the HTTP communication
// when using the .load() method the HTML returned from the server is inserted into a jQuery selection
// you can specify what should be done with the data that is returned using the jqXHR object


/*--------------------------------------------------------------------------------------------------------------*/
// APIs

// history API works like a stack, new pages that are visited are pushed to the top of the stack
// navigating backwards moves you down the stack
// navigating forwards moves you up the stack

history.back() // obvious
history.forward() // obvious
history.go(+ - integer) // takes you to a place in the histories index originating at 0
history.pushState(state, "title", url) // pushes an item to the history stack
history.replaceState(state, "title", url) // edits the current history item
history.lenth // how many items are in the stack

// AngularJS is a MVC development approach for JS


/*--------------------------------------------------------------------------------------------------------------*/
// ERRORS

// Objects
Error // generic
SyntaxError // obvious
ReferenceError // scope error
TypeError // unrecognized datatype that cannot be coerced
RangeError // number(s) not within an accepted range
URIError // URI methods used incorrectly
EvalError // eval() used incorrectly

// Properties
name // type of execution
message
fileNumber // name of JS file
lineNumber

try // return, break, and continue keywords will all skip to the finally clause
{
	// try to execute this code
}
catch(exception)
{
	// if an exception is raised, run this code
}
finally
{
	// this always gets executed
}

throw new Error("message");


/*--------------------------------------------------------------------------------------------------------------*/
// STATEMENTS/CONSTRUCTS
	// null, undefined, 0, false, NaN, "", & '' will all evaluate to false for logic conditions

if(condition1)
{

}
else if(condition2)
{

}
else
{

};



switch(condition)
{
	case option1:
		// do something
		break;
	case option2:
		// do something
		break;
	default:
		// do something
		break;
}


for(let i = 0; i < n; i++)
{
	// do something 'n' times
}

/*--------------------------------------------------------------------------------------------------------------*/
// MISC

var $jq = jQuery.noConflict();
var $mt = MooTools.noConflict();
var $y = YUI.noConflict();
// you can specify a custom alias to avoid shorthand conflicts with certain JS libraries
